// Copyright 2019 The gRPC Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Service exported by server reflection


// Warning: this entire file is deprecated. Use this instead:
// https://github.com/grpc/grpc-proto/blob/master/grpc/reflection/v1/reflection.proto

syntax = "proto3";

package google.lookup.v1alpha1;

import "google/protobuf/duration.proto";

option deprecated = true;
option java_multiple_files = true;
option java_package = "io.grpc.lookup.v1alpha1";
option java_outer_classname = "RouteLookupServiceProto";

message RouteLookupRequest {
  // Full host name of the target server, e.g. firestore.googleapis.com.
  // Only set for gRPC requests; HTTP requests must use key_map explicitly.
  string server = 1;
  // Full path of the request, e.g. service and method for gRPC; does not
  // include any query component.
  // Only set for gRPC requests; HTTP requests must use key_map explicitly.
  string path = 2;
  // Target type allows the client to specify what kind of target format it
  // would like from RLS to allow it to find the regional server, e.g. "grpc".
  string target_type = 3;
  // Map of key values extracted via KeyBuilder for URL or gRPC request.
  map<string, string> key_map = 4;
}

message RouteLookupResponse {
  // Actual addressable entity to use for routing decision, using syntax
  // requested by the request target_type.
  string target = 1;
  // Optional HTTP headers or gRPC metadata to add to the client request.
  // Cached with "target" and sent with all requests that match the request key.
  // Allows the RLS to pass its work product to the final regional AFE.
  message Header {
    string header = 1;
    string value = 2;
  }
  repeated Header headers = 2;
}

service RouteLookupService {
  // Lookup returns a target for a single key.  For now we provide a simple
  // stubby service, but can add a bidi streaming version for performance
  // if necessary when needed.
  rpc RouteLookup(RouteLookupRequest) returns (RouteLookupResponse) {};
}

// Match against the a given name (e.g. header name or query parameter name).
// The name must match one of the names listed in the "name" field.  If no
// name matches, the match fails, unless the optional_match field is true.
message NameMatcher {
  // Ordered list of names; the first non-empty value will be used.
  repeated string name = 1;

  // If true, make this extraction optional.
  // A key builder will still match if no value is found.
  bool optional_match = 2;
}

// A GrpcKeyBuilder applies to a given gRPC service, name, and headers.
message GrpcKeyBuilder {
  // To match, one of the given Name fields must match; the service and method
  // fields are specified as fixed strings.  The service name is required and
  // includes the proto package name.  The method name may be omitted, in
  // which case any method on the given service is matched.
  message Name {
    string service = 1;
    string method = 2;
  }
  repeated Name name = 1;

  // All listed headers must match (or be optional).
  map<string, NameMatcher> headers = 2;
}

// An HttpKeyBuilder applies to a given HTTP URL and headers.
//
// Path and host patterns use the matching syntax from gRPC transcoding to
// extract named key/value pairs from the path and host components of the URL:
// https://github.com/googleapis/googleapis/blob/master/google/api/http.proto
//
// It is invalid to specify the same key name in multiple places in a pattern.
//
// For a service where the project id can be expressed either as a subdomain or
// in the path, separate HttpKeyBuilders must be used:
//     host_pattern: 'example.com' path_pattern: '/{id}/{object}/**'
//     host_pattern: '{id}.example.com' path_pattern: '/{object}/**'
// If the host is exactly 'example.com', the first segment will be used as the
// id and the second segment as the object. If the host has a subdomain, the
// subdomain will be used as the id and the first segment as the object. If
// neither pattern matches, no keys will be extracted.
message HttpKeyBuilder {
  // host_pattern is an ordered list of host template patterns for the desired
  // value.  If any host_pattern values are specified, then at least one must
  // match, and the last one wins and sets any specified variables.  A host
  // consists of labels separated by dots. Each label is matched against the
  // label in the pattern as follows:
  //   - "*": Matches any single label.
  //   - "**": Matches zero or more labels (first or last part of host only).
  //   - "{<name>=...}": One or more label capture, where "..." can be any
  //      template that does not include a capture.
  //   - "{<name>}": A single label capture. Identical to {<name>=*}.
  //
  // Examples:
  //   - "example.com": Only applies to the exact host example.com.
  //   - "*.example.com": Matches subdomains of example.com.
  //   - "**.example.com": matches example.com, and all levels of subdomains.
  //   - "{project}.example.com": Extracts the third level subdomain.
  //   - "{project=**}.example.com": Extracts the third level+ subdomains.
  //   - "{project=**}": Extracts the entire host.
  repeated string host_pattern = 1;

  // path_pattern is an ordered list of path template patterns for the desired
  // value.  If any path_pattern values are specified, then at least one must
  // match, and the last one wins and sets any specified variables.  A path
  // consists of segments separated by slashes. Each segment is matched against
  // the segment in the pattern as follows:
  //   - "*": Matches any single segment.
  //   - "**": Matches zero or more segments (first or last part of path only).
  //   - "{<name>=...}": One or more segment capture, where "..." can be any
  //      template that does not include a capture.
  //   - "{<name>}": A single segment capture. Identical to {<name>=*}.
  // A custom method may also be specified by appending ":" and the custom
  // method name or "*" to indicate any custom method (including no custom
  // method).  For example, "/*/projects/{project_id}/**:*" extracts
  // `{project_id}` for any version, resource and custom method that includes
  // it.  By default, any custom method will be matched.
  //
  // Examples:
  //   - "/v1/{name=messages/*}": extracts a name like "messages/12345".
  //   - "/v1/messages/{message_id}": extracts a message_id like "12345".
  //   - "/v1/users/{user_id}/messages/{message_id}": extracts two key values.
  repeated string path_pattern = 2;

  // Map of lookup key names to query parameter names.
  // For example: ["parent", "name", "resource.name"]
  // All query_parameters must match or be marked as optional_match.
  // If a given parameter appears multiple times (?foo=a&foo=b) we will report
  // it as a comma-separated string (foo=a,b).
  map<string, NameMatcher> query_parameters = 3;

  // Map of lookup key names to header names.
  // All headers must match or be marked as optional_match.
  // If a given header appears multiple times in the request we will report
  // it as a comma-separated string, in standard HTML fashion.
  map<string, NameMatcher> headers = 4;
}

message RouteLookupConfig {
  // Ordered specifications for constructing keys for HTTP requests.  Last
  // match wins.  If no HttpKeyBuilder matches, an empty map will be sent to
  // the lookup service; it should likely reply with a global default route
  // and raise an alert.
  repeated HttpKeyBuilder http_keybuilder = 1;

  // Unordered specifications for constructing keys for gRPC requests.  All
  // GrpcKeyBuilders on this list must have unique "name" fields so that the
  // client is free to prebuild a hash map keyed by name.  If no
  // GrpcKeyBuilder matches, an empty map will be sent to the lookup service;
  // it should likely reply with a global default route and raise an alert.
  repeated GrpcKeyBuilder grpc_keybuilder = 2;

  // The name of the lookup service as a gRPC URI.  Typically, this will be
  // a subdomain of the target, such as "lookup.datastore.googleapis.com".
  string lookup_service = 3;

  // Configure a timeout value for lookup service requests. Required.
  google.protobuf.Duration lookup_service_timeout = 4;

  // How long are responses valid for (like HTTP Cache-Control).
  // If omitted (i.e. 0), responses are considered not to be cacheable.
  // This value is clamped to 5 minutes to avoid unflushable bad responses.
  google.protobuf.Duration max_age = 5;

  // After a response has been in the client cache for this amount of time
  // and is re-requested, start an asynchronous RPC to re-validate it.
  // This value should be less than max_age by at least the length of a
  // typical RTT to the Route Lookup Service to fully mask the RTT latency.
  // If omitted, keys are only re-requested after they have expired.
  google.protobuf.Duration stale_age = 6;

  // Rough indicator of amount of memory to use for the client cache, in
  // bytes.  Some of the data structure overhead is not accounted for, so
  // actual memory consumed will be somewhat greater than this value.
  // If this field is omitted or set to zero, a client default will be used.
  // The value may be capped to a lower amount based on client configuration.
  int64 cache_size = 7;

  // This value provides a default target to use if needed.  It should not be
  // defined if request processing strategy is SYNC_LOOKUP_CLIENT_SEES_ERROR.
  // Note that requests can be routed only to a subdomain of the original
  // target, e.g. "us_east_1.cloudbigtable.googleapis.com".
  string default_target = 8;

  // Specify how to process a request when a mapping is not available.
  enum RequestProcessingStrategy {
    // Query the RLS and process the request using target returned by the
    // lookup. The target will then be cached and used for processing
    // subsequent requests for the same key. Any errors during lookup service
    // processing will fall back to default target for request processing.
    SYNC_LOOKUP_DEFAULT_TARGET_ON_ERROR = 0;

    // Query the RLS and process the request using target returned by the
    // lookup. The target will then be cached and used for processing
    // subsequent requests for the same key. Any errors during lookup service
    // processing will return an error back to the client.  Services with
    // strict regional routing requirements should use this strategy.
    SYNC_LOOKUP_CLIENT_SEES_ERROR = 1;

    // Query the RLS asynchronously but respond with the default target.  The
    // target in the lookup response will then be cached and used for
    // subsequent requests.  Services with strict latency requirements (but not
    // strict regional routing requirements) should use this strategy.
    ASYNC_LOOKUP_DEFAULT_TARGET_ON_MISS = 2;
  }
  RequestProcessingStrategy request_processing_strategy = 9;
}
